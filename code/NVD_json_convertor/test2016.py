import pandas as pd

pdf = pd.read_json('nvdcve-1.1-2016.json')

xdf = pdf['CVE_Items'].to_dict()

ydf = pd.DataFrame()

temp = 0



for i in xdf.keys():
    temp += 1
    if temp > 10:
        break

    cve_id = xdf[i]['cve']['CVE_data_meta']['ID']

    affected_cpe = []

    def get_cpe(nd):

        if len(nd['children']) > 0:
            # not empty
            for child in nd['children']:
                get_cpe(child)
        else:
            # empty and base case
            for match in nd['cpe_match']:
                affected_cpe.append(match['cpe23Uri'])

    try:
        cve_description = xdf[i]['cve']['description']['description_data'][0]['value']
        if "REJECT" in cve_description:
            continue
    except IndexError:
        pass

    nodes_list = xdf[i]['configurations']['nodes']
    for node in nodes_list:
        get_cpe(node)

    container = {'cve_id': cve_id,
                 #'affected_cpe': affected_cpe,
                 'num_of_affected_cpe': len(affected_cpe)
                 }

    ydf = ydf.append(container, ignore_index=True)

print(ydf)
ydf.to_csv('test2016.csv', sep= "\\")





'''
-nodes operator, children, cpe_match
       
        - leading AND/OR
        - check if children [] is empty
        - if not empty, then open and length of list
            - iterate through each index (dict)
                - check for inner operator again
                - check if children empty
                    - if not empty, RECURSION HERE
                    - if empty, retrieve cpe_match
                        - iterate through and get URI
        - if children empty, check if cpe_match isEmpty
            - not empty -> extract URI
            - empty -> throw ERROR, no data
            
            
        def func checkCond(x = xdf[i]['configurations']['nodes']):
            - check children (loop children > 2)
                - empty (base)
                    -get cpe(loop cpe is a list)
                - not empty
                    -recursion


        - nodes [dict]
            - leading operators
            - children [dicts]
                - AND
                - OR
'''