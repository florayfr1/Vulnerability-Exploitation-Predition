import pandas as pd

pdf = pd.read_json('nvdcve-1.1-2016.json')

xdf = pdf['CVE_Items'].to_dict()

ydf = pd.DataFrame(columns={'cve_id', 'cve_publish_date', 'cwe_id'})

#temp = 0
for i in xdf.keys():
    #temp += 1
    #if temp > 10:
        #break

    cve_id = xdf[i]['cve']['CVE_data_meta']['ID']
    cve_date = xdf[i]['publishedDate']

    try:
        cve_description = xdf[i]['cve']['description']['description_data'][0]['value']
        if "REJECT" in cve_description:
            continue
        cwe_id = xdf[i]['cve']['problemtype']['problemtype_data'][0]['description'][0]['value']

    except IndexError:
        pass

    reference_list = num_of_reference = xdf[i]['cve']['references']['reference_data']
    num_of_reference = len(reference_list)

    nvd_poc = "False"
    for ref in reference_list:
        if "Exploit" in ref['tags']:
            nvd_poc = "True" #1 in the file

    try:
        # CVSSv3 metric
        cvss3_attackVector = xdf[i]['impact']['baseMetricV3']['cvssV3']['attackVector']
        cvss3_attackComplexity = xdf[i]['impact']['baseMetricV3']['cvssV3']['attackComplexity']
        cvss3_privilegesRequired = xdf[i]['impact']['baseMetricV3']['cvssV3']['privilegesRequired']
        cvss3_userInteraction = xdf[i]['impact']['baseMetricV3']['cvssV3']['userInteraction']
        cvss3_scope = xdf[i]['impact']['baseMetricV3']['cvssV3']['scope']
        cvss3_confidentialityImpact = xdf[i]['impact']['baseMetricV3']['cvssV3']['confidentialityImpact']
        cvss3_integrityImpact = xdf[i]['impact']['baseMetricV3']['cvssV3']['integrityImpact']
        cvss3_availabilityImpact = xdf[i]['impact']['baseMetricV3']['cvssV3']['availabilityImpact']
        cvss3_baseScore = xdf[i]['impact']['baseMetricV3']['cvssV3']['baseScore']
        cvss3_baseSeverity = xdf[i]['impact']['baseMetricV3']['cvssV3']['baseSeverity']
        cvss3_exploitabilityScore = xdf[i]['impact']['baseMetricV3']['exploitabilityScore']
        cvss3_impactScore = xdf[i]['impact']['baseMetricV3']['impactScore']

        # CVSSv2 metric
        cvss2_accessVector = xdf[i]['impact']['baseMetricV2']['cvssV2']['accessVector']
        cvss2_accessComplexity = xdf[i]['impact']['baseMetricV2']['cvssV2']['accessComplexity']
        cvss2_authentication = xdf[i]['impact']['baseMetricV2']['cvssV2']['authentication']
        cvss2_confidentialityImpact = xdf[i]['impact']['baseMetricV2']['cvssV2']['confidentialityImpact']
        cvss2_integrityImpact = xdf[i]['impact']['baseMetricV2']['cvssV2']['integrityImpact']
        cvss2_availabilityImpact = xdf[i]['impact']['baseMetricV2']['cvssV2']['availabilityImpact']
        cvss2_baseScore = xdf[i]['impact']['baseMetricV2']['cvssV2']['baseScore']

        cvss2_severity = xdf[i]['impact']['baseMetricV2']['severity']
        cvss2_exploitabilityScore = xdf[i]['impact']['baseMetricV2']['exploitabilityScore']
        cvss2_impactScore = xdf[i]['impact']['baseMetricV2']['impactScore']
        cvss2_obtainAllPrivilege = xdf[i]['impact']['baseMetricV2']['obtainAllPrivilege']
        cvss2_obtainUserPrivilege = xdf[i]['impact']['baseMetricV2']['obtainUserPrivilege']
        cvss2_obtainOtherPrivilege = xdf[i]['impact']['baseMetricV2']['obtainOtherPrivilege']
        cvss2_userInteractionRequired = xdf[i]['impact']['baseMetricV2']['userInteractionRequired']
    except KeyError:
        pass

    affected_cpe = []
    def get_cpe(nd):

        if len(nd['children']) > 0:
            # not empty
            for child in nd['children']:
                get_cpe(child)
        else:
            # empty and base case
            for match in nd['cpe_match']:
                affected_cpe.append(match['cpe23Uri'])

    nodes_list = xdf[i]['configurations']['nodes']
    for node in nodes_list:
        get_cpe(node)


    container = {'cve_id': cve_id, 'cve_publish_date': cve_date, 'cwe_id': cwe_id,
                 'num_of_reference': num_of_reference,
                 'cve_description': cve_description,
                 #'affected_cpe': affected_cpe,
                 'num_of_affected_cpe': len(affected_cpe),
                 'nvd_poc_link': nvd_poc,

                 'cvss2_accessVector': cvss2_accessVector,
                 'cvss2_accessComplexity': cvss2_accessComplexity,
                 'cvss2_authentication': cvss2_authentication,
                 'cvss2_confidentialityImpact': cvss2_confidentialityImpact,
                 'cvss2_integrityImpact': cvss2_integrityImpact,
                 'cvss2_availabilityImpact': cvss2_availabilityImpact,
                 'cvss2_baseScore': cvss2_baseScore,
                 'cvss2_severity': cvss2_severity,
                 'cvss2_exploitabilityScore': cvss2_exploitabilityScore,
                 'cvss2_impactScore': cvss2_impactScore,
                 'cvss2_obtainAllPrivilege': cvss2_obtainAllPrivilege,
                 'cvss2_obtainUserPrivilege': cvss2_obtainUserPrivilege,
                 'cvss2_obtainOtherPrivilege': cvss2_obtainOtherPrivilege,
                 'cvss2_userInteractionRequired': cvss2_userInteractionRequired,

                 #'cvss3_attackVector': cvss3_attackVector,
                 #'cvss3_attackComplexity': cvss3_attackComplexity,
                 #'cvss3_privilegesRequired': cvss3_privilegesRequired,
                 #'cvss3_userInteraction': cvss3_userInteraction,
                 #'cvss3_ascope': cvss3_scope,
                 #'cvss3_confidentialityImpact': cvss3_confidentialityImpact,
                 #'cvss3_aintegrityImpact': cvss3_integrityImpact,
                 #'cvss3_availabilityImpact': cvss3_availabilityImpact,
                 #'cvss3_baseScore': cvss3_baseScore,
                 #'cvss3_baseSeverity': cvss3_baseSeverity,
                 #'cvss3_exploitabilityScore': cvss3_exploitabilityScore,
                 #'cvss3_impactScore': cvss3_impactScore

                 }

    ydf = ydf.append(container, ignore_index=True)

print(ydf)
ydf.to_csv('nvd2016_no_cpe_cvss2.csv', sep= "\\")
