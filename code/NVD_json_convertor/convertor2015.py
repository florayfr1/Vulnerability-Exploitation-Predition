import pandas as pd

pdf = pd.read_json('nvdcve-1.1-2015.json')

xdf = pdf['CVE_Items'].to_dict()

ydf = pd.DataFrame(columns={'cve_id', 'cve_publish_date', 'cwe_id'})

#temp = 0
for i in xdf.keys():
    #temp += 1
    #if temp > 10:
        #break

    cve_id = xdf[i]['cve']['CVE_data_meta']['ID']
    cve_date = xdf[i]['publishedDate']

    try:
        cwe_id = xdf[i]['cve']['problemtype']['problemtype_data'][0]['description'][0]['value']
        cve_description = xdf[i]['cve']['description']['description_data'][0]['value']
        if "REJECT" in cve_description:
            continue
    except IndexError:
        pass

    reference_list = num_of_reference = xdf[i]['cve']['references']['reference_data']
    num_of_reference = len(reference_list)

    nvd_poc = False
    for ref in reference_list:
        if "Exploit" in ref['tags']:
            nvd_poc = True #1 in the file

    try:
        cvss_accessVector = xdf[i]['impact']['baseMetricV2']['cvssV2']['accessVector']
        cvss_accessComplexity = xdf[i]['impact']['baseMetricV2']['cvssV2']['accessComplexity']
        cvss_authentication = xdf[i]['impact']['baseMetricV2']['cvssV2']['authentication']
        cvss_confidentialityImpact = xdf[i]['impact']['baseMetricV2']['cvssV2']['confidentialityImpact']
        cvss_integrityImpact = xdf[i]['impact']['baseMetricV2']['cvssV2']['integrityImpact']
        cvss_availabilityImpact = xdf[i]['impact']['baseMetricV2']['cvssV2']['availabilityImpact']
        cvss_baseScore = xdf[i]['impact']['baseMetricV2']['cvssV2']['baseScore']

        cvss_severity = xdf[i]['impact']['baseMetricV2']['severity']
        cvss_exploitabilityScore = xdf[i]['impact']['baseMetricV2']['exploitabilityScore']
        cvss_impactScore = xdf[i]['impact']['baseMetricV2']['impactScore']
        cvss_obtainAllPrivilege = xdf[i]['impact']['baseMetricV2']['obtainAllPrivilege']
        cvss_obtainUserPrivilege = xdf[i]['impact']['baseMetricV2']['obtainUserPrivilege']
        cvss_obtainOtherPrivilege = xdf[i]['impact']['baseMetricV2']['obtainOtherPrivilege']
        cvss_userInteractionRequired = xdf[i]['impact']['baseMetricV2']['userInteractionRequired']
    except KeyError:
        pass

    affected_cpe = []


    def get_cpe(nd):

        if len(nd['children']) > 0:
            # not empty
            for child in nd['children']:
                get_cpe(child)
        else:
            # empty and base case
            for match in nd['cpe_match']:
                affected_cpe.append(match['cpe23Uri'])

    nodes_list = xdf[i]['configurations']['nodes']
    for node in nodes_list:
        get_cpe(node)

    container = {'cve_id': cve_id, 'cve_publish_date': cve_date, 'cwe_id': cwe_id,
                 'num_of_reference': num_of_reference,
                 'cve_description': cve_description,
                 #'affected_cpe': affected_cpe,
                 'num_of_affected_cpe': len(affected_cpe),
                 'nvd_poc_link': nvd_poc,
                 'cvss_accessVector': cvss_accessVector,
                 'cvss_accessComplexity': cvss_accessComplexity,
                 'cvss_authentication': cvss_authentication,
                 'cvss_confidentialityImpact': cvss_confidentialityImpact,
                 'cvss_integrityImpact': cvss_integrityImpact,
                 'cvss_availabilityImpact': cvss_availabilityImpact,
                 'cvss_baseScore': cvss_baseScore,
                 'cvss_severity': cvss_severity,
                 'cvss_exploitabilityScore': cvss_exploitabilityScore,
                 'cvss_impactScore': cvss_impactScore,
                 'cvss_obtainAllPrivilege': cvss_obtainAllPrivilege,
                 'cvss_obtainUserPrivilege': cvss_obtainUserPrivilege,
                 'cvss_obtainOtherPrivilege': cvss_obtainOtherPrivilege,
                 'cvss_userInteractionRequired': cvss_userInteractionRequired
                 }

    ydf = ydf.append(container, ignore_index=True)

print(ydf)
ydf.to_csv('nvd2015_no_cpe.csv', sep= "\\")
