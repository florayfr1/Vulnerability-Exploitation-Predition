# accuracy = []
# index = []

# FP 
# TP
# TN
# FN


# connect to database --> tdf with two columns
#TP,TN
# numpy for loop -> lets us iterate by .5 = index

    # list = tdf[tdf['cvss'] >= index]['labels'].tolist() [T, F, T]
    # list should be true, but yours has T and F
        # list comprehension (if i is T for i in list) = count of true:  T -> TP
        # calculate accuracy --> append to accuracy                   :  F -> FN

    # list = tdf[tdf['cvss'] < index]['labels'].tolist() [T, F, T] should be all F,F,F
    # list should be false, but yours has T and F
        # list comprehension (if i is T for i in list) = count of false: F -> TN
        # calculate accuracy --> append to accuracy                   :  T -> FP


from matplotlib import pyplot as plt
from connect import get
import numpy as np
import pandas as pd

cols = '*'
#tbl = 'baseline_no_ml'
tbl = 'baseline_no_ml_all'
modifier = None
where = None
tdf = get(tbl, cols, where, modifier) 

x, y1, y2, y3, y4 = [],[],[], [], []
it = 0.1
for thr in np.arange(0, 10+it, it):
    p_pred = tdf[tdf['cvss2_basescore'] >= thr]['train_label'].tolist()
    n_pred = tdf[tdf['cvss2_basescore'] < thr]['train_label'].tolist()

    TP, FP, TN, FN = 0,0,0,0
    #0 is false
    # instead of ML, we're doing Thr
    # thr --> prediction
    # label --> actual value
    for p in p_pred: #pred pos
        if p: 
            TP+=1 
        else: # prediction = T, L = F
            FP+=1
    for n in n_pred: #pred neg
        if not n: # prediction = F, L = F
            TN+=1
        else:
            FN+=1
    
    precision = TP/(TP+FP)
    recall = TP/(TP+FN)
    accuracy = (TP + TN)/(TP + FP + TN + FN)
    f1 = 2*(precision * recall)/(precision + recall)
    x.append(thr)
    y1.append(precision)
    y2.append(recall)
    y3.append(accuracy)
    y4.append(f1)


fig = plt.figure()
plt.plot(x, y1, label = 'precision', color = 'blue')
plt.plot(x, y2, label = 'recall', color = 'green')
#plt.plot(x, y3, label = 'accuracy', color = 'red')
plt.plot(x, y4, label = 'f1', color = 'red')

plt.xlabel('Threshold Value')
plt.ylabel('Rate')
#plt.title('CVSS_Score Balanced')
plt.title('CVSS_Score Imbalanced')
plt.legend()

interval = 0.1
plt.yticks(np.arange(0, 1+interval, interval))
plt.xticks(np.arange(0, 11, 1))

save = False
if not save:
    plt.show()
else:
    #fig.savefig("Thresholds_Balance", dpi = 500)
    fig.savefig("Thresholds_Imbalance", dpi = 500)
    print('Image Saved to Local directory!')
