import pandas as pd
import psycopg2


def gen_df(rows, cols, tablename, conn):
    if isinstance(cols, list):
        return pd.DataFrame(data=rows, columns=cols)
    else:
        temp = []
        x = cols.split(",") #error
        for i in x:
            temp.append(i.split()[-1])
        return pd.DataFrame(data=rows, columns=temp)


def get(table_name, cols='*', where=None, modifier=None, database='NVD'):
    q = df = None

    try:
        connection = psycopg2.connect(
            host='localhost',  # host on which the database is running
            database=database,  # name of the database to connect to
            user='postgres',  # username to connect with
            password=''  # insert your password here
        )
    except:
        print('Connection failed...')
        pass

    else:
        cursor = connection.cursor()
        if where == None and modifier == None:
            q = f'SELECT {cols} FROM {table_name};'
        elif where != None and modifier == None:
            q = f'SELECT {cols} FROM {table_name} where {where};'
        elif where == None and modifier != None:
            q = f'SELECT {cols} FROM {table_name} {modifier};'
        else:
            q = f'SELECT DISTINCT * FROM {table_name} WHERE {where} {modifier};'

        print(f'Firing ...{q}')
        cursor.execute(q)
        rows = cursor.fetchall()
        colnames = [desc[0] for desc in cursor.description]
        df = gen_df(rows, colnames, table_name, connection)
        #??no close for cursor?
        #cursor.close()
        connection.close()
        return df

def copy_from_file(df, table):
    """
    Here we are going save the dataframe on disk as 
    a csv file, load the csv file  
    and use copy_from() to copy it to the table
    """
    try:
        conn = psycopg2.connect(
            host='localhost',  # host on which the database is running
            database='NVD',  # name of the database to connect to
            user='postgres',  # username to connect with
            password='13922130490Yf'  # insert your password here
        )
    except:
        print('Connection failed...')
        pass

    # Save the dataframe to disk
    tmp_df = "tmp_dataframe.csv"
    df.to_csv(tmp_df, index_label='id', header=False, index = False)
    f = open(tmp_df, 'r')
    cursor = conn.cursor()
    try:

        cursor.execute(f"DROP TABLE IF EXISTS {table};")
        
        sql = f'''CREATE TABLE {table}(
            assign_date date,
            cve_id text,
            cwe_id text,
            cve_publish_date date,
            cvss2_accesscomplexity text,
            cvss2_accessvector text,
            cvss2_authentication text,
            cvss2_availabilityimpact text,
            cvss2_basescore double precision,
            cvss2_confidentialityimpact text,
            cvss2_exploitabilityscore double precision,
            cvss2_impactscore double precision,
            cvss2_integrityimpact text,
            cvss2_obtainallprivilege boolean,
            cvss2_obtainotherprivilege boolean,
            cvss2_obtainuserprivilege boolean,
            cvss2_severity text,
            cvss2_userinteractionrequired boolean,
            num_of_affected_cpe double precision,
            num_of_reference double precision,
            nvd_poc_link boolean,
            train_label boolean,
            assign_to_publish integer,
            dw_users text,
            dw_post text,
            reference_tag text,
            reference_source text,
            cpe_products text,
            cpe_vendors text,
            dw_post_content text,
            dw_market_item text
        )'''
        
        # Creating a table
        cursor.execute(sql)
        print("{table} is created successfully................")

        cursor.copy_from(f, table, sep=",")
        conn.commit()
    except (Exception, psycopg2.DatabaseError) as error:
        print("Error: %s" % error)
        conn.rollback()
        cursor.close()
        return 1
    print("copy_from_file() done")
    cursor.close()

def create_table(table):
    
    try:
        conn = psycopg2.connect(
            host='localhost',  # host on which the database is running
            database='NVD',  # name of the database to connect to
            user='postgres',  # username to connect with
            password=''  # insert your password here
        )
    except:
        print('Connection failed...')
        pass

    cursor = conn.cursor()
    try:

        cursor.execute(f"DROP TABLE IF EXISTS {table};")
        
        sql = f'''CREATE TABLE {table}(
            assign_date date,
            cve_id text,
            cwe_id text,
            cve_publish_date date,
            cvss2_accesscomplexity text,
            cvss2_accessvector text,
            cvss2_authentication text,
            cvss2_availabilityimpact text,
            cvss2_basescore double precision,
            cvss2_confidentialityimpact text,
            cvss2_exploitabilityscore double precision,
            cvss2_impactscore double precision,
            cvss2_integrityimpact text,
            cvss2_obtainallprivilege boolean,
            cvss2_obtainotherprivilege boolean,
            cvss2_obtainuserprivilege boolean,
            cvss2_severity text,
            cvss2_userinteractionrequired boolean,
            num_of_affected_cpe double precision,
            num_of_reference double precision,
            nvd_poc_link boolean,
            train_label boolean DEFAULT false
        )'''
            
        # Creating a table
        cursor.execute(sql)
        print("{table} is created successfully................")
    except:
        pass

def change_table(sql):
    
    try:
        conn = psycopg2.connect(
            host='localhost',  # host on which the database is running
            database='NVD',  # name of the database to connect to
            user='postgres',  # username to connect with
            password='13922130490Yf'  # insert your password here
        )
    except:
        print('Connection failed...')
        pass

    cursor = conn.cursor()
    try:
        cursor.execute(sql)
        print("{sql} is firing................")
    except:
        print("{sql} ERROR ................")
