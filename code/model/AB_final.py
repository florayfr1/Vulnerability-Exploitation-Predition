import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, roc_auc_score, roc_curve, f1_score
import itertools
from sklearn.ensemble import AdaBoostClassifier

data = pd.read_csv('testing.csv', delimiter=',')
test = pd.read_csv('testing.csv', delimiter=',')
#print(data['train_label'].dtype)



'''label_map = {'t': 1, 'f': 0}
data['train_label'] = data['train_label'].map(label_map)
test['train_label'] = test['train_label'].map(label_map)'''
label_map = {True: 1, False: 0}
data['train_label'] = data['train_label'].map(label_map)
test['train_label'] = test['train_label'].map(label_map)


seed = 50 
#train_data, test_data, train_label, test_label = train_test_split(X,train_label,test_size=0.1, random_state = seed)
train_label = data.pop('train_label')
test_label = test.pop('train_label')

dropList = ['Unnamed: 0','Unnamed: 0.1','assign_date','cve_publish_date','cve_id','cwe_id','cvss2_basescore','cvss2_exploitabilityscore',\
            'cvss2_impactscore','cvss2_obtainallprivilege','cvss2_obtainotherprivilege','cvss2_obtainuserprivilege',\
            'cvss2_severity','cvss2_userinteractionrequired','cve_description','reference_tag','reference_source',\
            'cpe_products','cpe_vendors','dw_post_content','dw_market_item']
#train_data = data.drop('index',axis = 1)

train_data = data
test_data = test
for item in dropList:
    train_data = train_data.drop(item,axis = 1)
    test_data = test_data.drop(item,axis = 1)
#train_data = train_data.drop('cve_description',axis = 1)


features_to_encode = train_data.columns[train_data.dtypes==object].tolist()  

#*********************************************
#num of columns is different in test and train **REQ FIX

col_trans = make_column_transformer(
                        (OneHotEncoder(handle_unknown='ignore'),features_to_encode),
                        remainder = "passthrough"
                        )

#plum
rf_classifier = RandomForestClassifier(
                      min_samples_leaf=50,
                      n_estimators=150,
                      bootstrap=False,
                      oob_score=False,
                      class_weight='balanced_subsample',
                      n_jobs=-1,
                      random_state=seed,
                      max_features='auto')


model = AdaBoostClassifier(random_state=50, base_estimator= rf_classifier, n_estimators=100, learning_rate= 0.001)

pipe = make_pipeline(col_trans, model)
pipe.fit(train_data, train_label)


y_pred = pipe.predict(test_data)

def encode_and_bind(original_dataframe, features_to_encode):
    dummies = pd.get_dummies(original_dataframe[features_to_encode])
    res = pd.concat([dummies, original_dataframe], axis=1)
    res = res.drop(features_to_encode, axis=1)
    return(res)
#-------------------------------------------------------------------
#remove accuracy
# keep base vector
# add time
# add DW
# train as it is 
# change threathold from 0.5
# knn
#n-gram TF-IDF (prevent mis-spelling)
#----------------------------------------------------------------

#--------------------------------------------------------
#--------------------------------------------------------
#--------------------------------------------------------
#--------------------------------------------------------


accuracy = accuracy_score(test_label, y_pred)
recall = recall_score(test_label, y_pred)
precision = precision_score(test_label, y_pred)
f1 = f1_score(test_label, y_pred)

print("Adaboost with RF")
print(f"The accuracy of the model is {round(accuracy,3)*100} %")
print(f"The recall of the model is {round(recall,3)*100} %")
print(f"The precision of the model is {round(precision,3)*100} %")
print(f"The f1 of the model is {round(f1,3)}")

